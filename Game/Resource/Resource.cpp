#include"Resource.h"

/*---------------------------------------------------------------------
コンストラクタ
---------------------------------------------------------------------*/
ResourceManager::ResourceManager() :mTextures{}
{

}

/*---------------------------------------------------------------------
デストラクタ
---------------------------------------------------------------------*/
ResourceManager::~ResourceManager()
{

}

//========================================================================
//========================================================================
//========================================================================
/*---------------------------------------------------------------------
テクスチャの読み込み
引数		：TEXTURE id (画像番号),std::string path (画像パス)
---------------------------------------------------------------------*/
int ResourceManager::LoadTexture(eTEXTURE textureId, std::string path)
{
	//列挙型を整数型にキャスト
	int id = static_cast<int>(textureId);

	//画像が読み込まれていたなら処理しない
	if (mTextures[id] > 0)
	{
		return mTextures[id];
	}

	//パス文字列の生成
	std::string texturePath = "Resources/Textures/" + path;
	//!!文字列連結

	//画像読み込み
	int handle = LoadGraph(texturePath.c_str());
	//!! string型をchar*型に変換している

	//画像の読み込みに成功していたらハンドルを保存
	mTextures[id] = handle;

	//ハンドル番号を返却
	return mTextures[id];
}

/*---------------------------------------------------------------------
テクスチャの取得
引数	：TEXTUBE id (画像番号)
---------------------------------------------------------------------*/
int ResourceManager::GetTexture(eTEXTURE textureid)
{
	//列挙型を整数型にキャスト
	int id = static_cast<int>(textureid);

	return mTextures[id];
}

/*---------------------------------------------------------------------
画像の削除
引数	:TEXTURE id(画像番号)
---------------------------------------------------------------------*/
void ResourceManager::DeleteTexture(eTEXTURE textureid)
{
	//列挙型を整数型にキャスト
	int id = static_cast<int>(textureid);

	//ハンドルが存在しなければ処理しない
	if (mTextures[id] <= 0)
	{
		return;
	}

	DeleteGraph(mTextures[id]);

	//画像ハンドルを0でリセット
	mTextures[id] = 0;
}

/*---------------------------------------------------------------------
全画像の削除
---------------------------------------------------------------------*/
void ResourceManager::DeleteTextureALL()
{
	//列挙型の最大数を整数型にキャスト
	int max = static_cast<int>(eTEXTURE::MAX);

	//全画像の削除
	for (int i = 0; i < max; i++)
	{
		//整数型を列挙型にキャスト
		eTEXTURE id = static_cast<eTEXTURE>(i);

		//画像の削除
		DeleteTexture(id);
	}
}
//========================================================================
//========================================================================
//========================================================================


//========================================================================
//========================================================================
//========================================================================
/*---------------------------------------------------------------------
音源の読み込み
引数		：AUDIO id (音源番号),std::string path (音源パス)
---------------------------------------------------------------------*/
int ResourceManager::LoadAudio(eAUDIO audioId, std::string path)
{
	//列挙型を整数型にキャスト
	int id = static_cast<int>(audioId);

	//画像が読み込まれていたなら処理しない
	if (mAudio[id] > 0)
	{
		return mAudio[id];
	}

	//パス文字列の生成
	std::string audioPath = "Resources/Audio/" + path;
	//!!文字列連結

	//画像読み込み
	int handle = LoadSoundMem(audioPath.c_str());
	//!! string型をchar*型に変換している

	//画像の読み込みに成功していたらハンドルを保存
	mAudio[id] = handle;

	//ハンドル番号を返却
	return mAudio[id];
}

/*---------------------------------------------------------------------
音源の取得
引数	：AUDIO id (音源番号)
---------------------------------------------------------------------*/
int ResourceManager::GetAudio(eAUDIO audioid)
{
	//列挙型を整数型にキャスト
	int id = static_cast<int>(audioid);

	return mAudio[id];
}

/*---------------------------------------------------------------------
音源の削除
引数	:AUDIO id(音源番号)
---------------------------------------------------------------------*/
void ResourceManager::DeleteAudio(eAUDIO audioid)
{
	//列挙型を整数型にキャスト
	int id = static_cast<int>(audioid);

	//ハンドルが存在しなければ処理しない
	if (mAudio[id] <= 0)
	{
		return;
	}

	DeleteSoundMem(mAudio[id]);

	//画像ハンドルを0でリセット
	mAudio[id] = 0;
}

/*---------------------------------------------------------------------
全音源の削除
---------------------------------------------------------------------*/
void ResourceManager::DeleteAudioALL()
{
	//列挙型の最大数を整数型にキャスト
	int max = static_cast<int>(eAUDIO::MAX);

	//全画像の削除
	for (int i = 0; i < max; i++)
	{
		//整数型を列挙型にキャスト
		eAUDIO id = static_cast<eAUDIO>(i);

		//画像の削除
		DeleteAudio(id);
	}
}
//========================================================================
//========================================================================
//========================================================================