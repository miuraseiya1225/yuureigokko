/*
　クラス：ステージ
  作成者：三浦聖矢
  作成日：9/16　　
*/
#include<fstream>
#include<sstream>
#include<iostream>
#include"../../GameData/GameData.h"

#include"Stage.h"
#include"../../Resource/Resource.h"
#include"../Player/Player.h"

#include"../Enemy/Ghost/Ghost1.h"
#include"../Enemy/Ghost/ChaseGhost.h"
#include"../Enemy/Ghost/ChaseGhostV2.h"
#include"../Enemy/Ghost/Warp.h"
#include"../Enemy/Ghost/Fire.h"

#include"../UI/Key.h"
#include"../UI/HeartBeat.h"
#include"../UI/TimerGuage.h"
#include"../UI/EnemyVoice.h"
#include"../UI/DollNum.h"

//================================================
//			コンストラクタ
//================================================
Stage::Stage(int SelectNum, MODE mode, GameData* pGameData) :
	mSelectNum{SelectNum}
	,mpGameData{pGameData}
	,mRS{RESULTSCENE::NONE}
	,mStage{}
	,mSprite{}
	,mTexture{}
	, mPos{}
	,mPos2{}
	,mEnemyCounter{0}
	,mBoxCounter{0}
	,mpUI{}
	,mpMask{}
	,mKey{}
	,mMode{mode}
	,mpMist{}
	,mpDoll{}
	,mDollCounter{}
	,mMoveFlag{false}
	,mMovePos{}
{
	mMovePos.mX = -32;
	mMovePos.mY = -32;
}

//================================================
//			デストラクタ
//================================================
Stage::~Stage()
{
}

//================================================
//			CSVファイルデータ取得
//================================================
bool Stage::LoadCSV()
{
	std::ifstream ifs("Resources/Stage/Book1.csv");

	//ファイル読み込みに失敗していたら失敗の値を返す
	if (ifs.fail())
	{
		return false;
	}

	//行の文字列を保存する変数
	std::string line;

	int nX = 0;
	int nY = 0;

	//行の読み込み
	for (int y = 0; std::getline(ifs, line); y++)
	{
		//streamに行の文字を入れる
		std::istringstream iss(line);

		//カンマ区切りの文字受け取り用
		std::string buf;

		//ステージデータの切り取り=====================
		if (y < mSelectNum * STAGE_SIZEY)
			continue;
		if (y > STAGE_SIZEY + (mSelectNum * STAGE_SIZEY))
			break;
		//===============================================

		//行の情報をカンマ区切りで受け取る
		for (int x = 0; std::getline(iss, buf, ','); x++)
		{
			if (x > STAGE_SIZEX)
				continue;

			//文字をintに変換
			int num = stoi(buf);

			//ステージ配列にタイル番号を代入
			mStage[nY][nX] = num;
			nX++;
		}
		nX = 0;
		nY++;
	}

	//ファイルを閉じる
	ifs.close();

	//成功
	return true;
}

//================================================
//			初期化
//================================================
void Stage::Initialize()
{
	//ステージデータの呼び出し
	LoadCSV();
	
	//画像データ
	ResourceManager* prm= ResourceManager::GetInstance();
	mTexture = prm->LoadTexture(eTEXTURE::MAP_TILE, "tile.png");	

	//マスクの実体化と初期化
	mpMask = new Mask();
	mpMask->Initialize();

	//霧の実体化と初期化
	mpMist = new Mist();
	mpMist->Initialize();

	//プレーヤークラスのインスタンス
	mpPlayer = new Player(mpMask);

	//扉の数の初期化
	int DoorNum = 0;

	//ステージタイルの設定==============================================================//==========================================================================================-==-
	//一つ目のブロックの座標															 //==========================================================================================-
	mPos.mX = -32.0f;																	//==========================================================================================-
	mPos.mY = -32.0f;																	//==========================================================================================-
																						//==========================================================================================-
	//ステージの構築																	 //==========================================================================================-
	for (int y = 0; y < STAGE_SIZEY; y++)												//==========================================================================================-
	{																					//==========================================================================================-
		mPos.mX = -32.0f;																//==========================================================================================-
		mPos.mY += 32.0f;																//==========================================================================================-
																						//==========================================================================================-
		for (int x = 0; x < STAGE_SIZEX; x++)											//==========================================================================================-
		{																				//==========================================================================================-
			mSprite[y][x].SetTexture(mTexture);											//==========================================================================================-
			switch (mStage[y][x])														//==========================================================================================-
			{																			//==========================================================================================-
				//データなし＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝							   //==========================================================================================-
				case 0:																	//==========================================================================================-
				{																		//==========================================================================================-
					continue;															//==========================================================================================-
					break;																//==========================================================================================-
				}			
				//ステージの移動タイル===========================						//==========================================================================================-
				case -2:																//==========================================================================================-
				{																		//==========================================================================================-
					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 64;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
				//時間切れになると消える壁======================================		//==========================================================================================-
				case -1:																//==========================================================================================-
				{																		//==========================================================================================-
					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 96;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
				//道======================================							   //==========================================================================================-
				case 1:																	//==========================================================================================-
				{																		//==========================================================================================-
					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 64;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
				//壁========================================							   //==========================================================================================-
				case 2:																	//==========================================================================================-
				{																		//==========================================================================================-
					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 96;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
				//扉																	   //==========================================================================================-
				case 3:																	//==========================================================================================-
				{																		//==========================================================================================-
					DoorNum++;															//==========================================================================================-
																						//==========================================================================================-
					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 64;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
																						//==========================================================================================-
					mpDoor.resize(DoorNum);												//==========================================================================================-
																						//==========================================================================================-
					mpDoor[DoorNum - 1] = new Door(x, y);								//==========================================================================================-
					mpDoor[DoorNum - 1]->Initialize();									//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
				//プレイヤーの初期位置												  //==========================================================================================-
				case 4:																	//==========================================================================================-
				{																		//==========================================================================================-
					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 64;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
					mpPlayer->SetPos(x, y);												//==========================================================================================-
																						//==========================================================================================-
					//道のデータに変換													//==========================================================================================-
					mStage[y][x] = 1;													//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
				//ゴール																 //==========================================================================================-
				case 5:																	//==========================================================================================-
				{																		//==========================================================================================-
					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 96;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
																						//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
				//箱（鍵）																//==========================================================================================-
				case 6:																	//==========================================================================================-
				{																		//==========================================================================================-
					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 64;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
																						//==========================================================================================-
					mpBox[mBoxCounter] = new Box(mpPlayer);								//==========================================================================================-
																						//==========================================================================================-
					//箱の初期座標を引数に入れる										   //==========================================================================================-
					mpBox[mBoxCounter]->SetPos(x, y);									//==========================================================================================-
																						//==========================================================================================-
					mpBox[mBoxCounter]->Initialize();									//==========================================================================================-
																						//==========================================================================================-
					//道のデータに変換													//==========================================================================================-
					mStage[y][x] = 1;													//==========================================================================================-
																						//==========================================================================================-
					mBoxCounter++;														//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
				//敵の初期座標--->>道に変換											  //==========================================================================================-
				case 7:																	//==========================================================================================-
				{																		//==========================================================================================-
					/*ランダム移動する敵*/

					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 64;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
																						//==========================================================================================-
					//敵クラスのインスタンス											 //==========================================================================================-
					mpEnemy[mEnemyCounter] = new Ghost1(mpPlayer);						//==========================================================================================-
																						//==========================================================================================-
					//敵の初期座標を引数に入れる										   //==========================================================================================-
					mpEnemy[mEnemyCounter]->SetPos(x, y);								//==========================================================================================-
																						//==========================================================================================-
					mpEnemy[mEnemyCounter]->Initialize();								//==========================================================================================-
																						//==========================================================================================-
					//道のデータに変換													//==========================================================================================-
					mStage[y][x] = 1;													//==========================================================================================-
																						//==========================================================================================-
					//敵の数を数える													 //==========================================================================================-
					mEnemyCounter++;													//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
				//敵の初期座標--->>道に変換											  //==========================================================================================-
				case 8:																	//==========================================================================================-
				{																		//==========================================================================================-
					/*プレイヤーがいる座標に向かう敵*/

					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 64;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
																						//==========================================================================================-
					//敵クラスのインスタンス											 //==========================================================================================-
					mpEnemy[mEnemyCounter] = new ChaseGhost(mpPlayer);					//==========================================================================================-
																						//==========================================================================================-
					//敵の初期座標を引数に入れる										   //==========================================================================================-
					mpEnemy[mEnemyCounter]->SetPos(x, y);								//==========================================================================================-
																						//==========================================================================================-
					mpEnemy[mEnemyCounter]->Initialize();								//==========================================================================================-
																						//==========================================================================================-
					//道のデータに変換													//==========================================================================================-
					mStage[y][x] = 1;													//==========================================================================================-
																						//==========================================================================================-
					//敵の数を数える													 //==========================================================================================-
					mEnemyCounter++;													//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
				//敵の初期座標--->>道に変換											  //==========================================================================================-
				case 9:																	//==========================================================================================-
				{																		//==========================================================================================-
					/*A*でプレイヤーを追いかける敵*/

					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 64;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
																						//==========================================================================================-
					//敵クラスのインスタンス											 //==========================================================================================-
					mpEnemy[mEnemyCounter] = new ChaseGhostV2(mpPlayer);				//==========================================================================================-
																						//==========================================================================================-
					//敵の初期座標を引数に入れる										   //==========================================================================================-
					mpEnemy[mEnemyCounter]->SetPos(x, y);								//==========================================================================================-
																						//==========================================================================================-
					mpEnemy[mEnemyCounter]->Initialize();								//==========================================================================================-
																						//==========================================================================================-
					//道のデータに変換													//==========================================================================================-
					mStage[y][x] = 1;													//==========================================================================================-
																						//==========================================================================================-
					//敵の数を数える													 //==========================================================================================-
					mEnemyCounter++;													//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
				case 10:																//==========================================================================================-
				{																		//==========================================================================================-
					/*瞬間移動する敵*/

					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 64;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
																						//==========================================================================================-
					//敵クラスのインスタンス											 //==========================================================================================-
					mpEnemy[mEnemyCounter] = new Warp(mpPlayer);						//==========================================================================================-
																						//==========================================================================================-
					//敵の初期座標を引数に入れる										   //==========================================================================================-
					mpEnemy[mEnemyCounter]->SetPos(x, y);								//==========================================================================================-
																						//==========================================================================================-
					mpEnemy[mEnemyCounter]->Initialize();								//==========================================================================================-
																						//==========================================================================================-
					//道のデータに変換													//==========================================================================================-
					mStage[y][x] = 1;													//==========================================================================================-
																						//==========================================================================================-
					//敵の数を数える													 //==========================================================================================-
					mEnemyCounter++;													//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
				case 11:																//==========================================================================================-
				{																		//==========================================================================================-
					/*近くまで行かないと見えない敵*/
					mSprite[y][x].src.x = 0;											//==========================================================================================-
					mSprite[y][x].src.y = 64;											//==========================================================================================-
					mSprite[y][x].size.x = 32;											//==========================================================================================-
					mSprite[y][x].size.y = 32;											//==========================================================================================-
																						//==========================================================================================-
					//敵クラスのインスタンス											 //==========================================================================================-
					mpEnemy[mEnemyCounter] = new Fire(mpPlayer);						//==========================================================================================-
																						//==========================================================================================-
					//敵の初期座標を引数に入れる										   //==========================================================================================-
					mpEnemy[mEnemyCounter]->SetPos(x, y);								//==========================================================================================-
																						//==========================================================================================-
					mpEnemy[mEnemyCounter]->Initialize();								//==========================================================================================-
																						//==========================================================================================-
					//道のデータに変換													//==========================================================================================-
					mStage[y][x] = 1;													//==========================================================================================-
																						//==========================================================================================-
					//敵の数を数える													 //==========================================================================================-
					mEnemyCounter++;													//==========================================================================================-
					break;																//==========================================================================================-
				}																		//==========================================================================================-
			}																			//==========================================================================================-
																						//==========================================================================================-
			mStageDefault[y][x] = mStage[y][x];											//==========================================================================================-
																						//==========================================================================================-
			mPos.mX += 32.0f;															//==========================================================================================-
			mSprite[y][x].pos.x = mPos.mX;												//==========================================================================================-
			mSprite[y][x].pos.y = mPos.mY;												//==========================================================================================-
		}																				//==========================================================================================-
	}																					//==========================================================================================-
//====================================================================================================================================================================================

	//扉クラスのアドレス取得	
	mpPlayer->SetDoor(mpDoor, mpDoor.size());
	//全体の鍵の数取得
	mpPlayer->SetKeyTotal(mBoxCounter);
	//プレイヤーの初期化
	mpPlayer->Initialize();

	//UI====================================

	//心音
	mpUI[0] = new HeartBeat();
	mpUI[0]->SetpPlayer(mpPlayer);
	mpUI[0]->SetpEnemy(mpEnemy, mEnemyCounter);
	mpUI[0]->Initialize();

	//鍵の数
	mpUI[1] = new KeyCheck(mBoxCounter);
	mpUI[1]->SetpPlayer(mpPlayer);
	mpUI[1]->Initialize();

	//時間
	mpUI[2] = new TimerGuage(mpGameData);
	mpUI[2]->SetpPlayer(mpPlayer);
	mpUI[2]->Initialize();

	//敵の鳴き声
	mpUI[3] = new EnemyVoice(mpEnemy, mEnemyCounter, mpPlayer);
	mpUI[3]->Initialize();

	//人形の数
	mpUI[4] = new DollNum(mpGameData);
	mpUI[4]->Initialize();
	//=====================================
}

//==========================================================================
//			更新
//============================================================================
void Stage::Update()
{
	//ステージデータの更新
	for (int y = 0; y < STAGE_SIZEY; y++)
	{
		for (int x = 0; x < STAGE_SIZEX; x++)
		{
			if (mStage[y][x] == 3)
				mStage[y][x] = 1;
			mStage[y][x] = mStageDefault[y][x];

			if (mpPlayer->GetTimerLimit() <= 0)
			{
				if (mStageDefault[y][x] == -1)
					mSprite[y][x].src.y = 64;

				if (mStageDefault[y][x] == 5)
				{
					mSprite[y][x].src.x = 64;
					mSprite[y][x].src.y = 0;
				}
			}
		}
	}

	//ステージの移動
	MoveStage();

	//人形を道にランダムに配置する================================
	if (mDollCounter != 3)
	{
		int DollX = GetRand(STAGE_SIZEX);
		int DollY = GetRand(STAGE_SIZEY);

		if (mStage[DollY][DollX] == 1)
		{
			mpDoll.resize(mDollCounter + 1);

			//人形クラスの実体化と初期化
			mpDoll[mDollCounter] = new Doll(DollX, DollY);
			mpDoll[mDollCounter]->Initialize();
			mDollCounter++;

			mpPlayer->SetDoll(mpDoll, mpDoll.size());

		}
	}
	//==========================================================

	//時間がオーバーしたらマスクを消す
	if (mpPlayer->GetTimerLimit() > 0)
		mpMask->ResetMask();
	
	//人形の更新
	for (int i = 0; i < static_cast<int> (mpDoll.size()); i++)
		mpDoll[i]->Update(mpPlayer);
	
	//プレイヤーにステージデータを渡す
	mpPlayer->SetStage(mStage);

	//プレイヤーの更新
	mpPlayer->Update();

	//プレイヤーの座標を取得
	mPlayerPos = mpPlayer->Getpos();

	//プレイヤーが人形を拾ったら人形の値を増やす
	if (mpPlayer->PickDoll() == true)
		mpGameData->AddDollNum();
	
	//プレイヤーの座標の更新
	mStage[mPlayerPos.mY][mPlayerPos.mX] = 4;

	//敵の更新=============================================================-===========
	for (int i = 0; i < mEnemyCounter; i++)
	{
		//時間切れになったら敵を全部消す=====================
		if (mpPlayer->GetTimerLimit() < 0)
		{
			if (mpEnemy[i] != nullptr)
			{
				delete mpEnemy[i];
				mpEnemy[i] = nullptr;
			}
		}
		//====================================================

		if (mpEnemy[i] == nullptr)
			continue;

		//敵ににステージデータを渡す
		mpEnemy[i]->SetStage(mStage);

		//敵の更新
		mpEnemy[i]->Update();
	}
	//========================================================================================

	//箱を開けた時の処理===========================
	for (int i = 0; i < mBoxCounter; i++)
	{
		if (IsButtonPressed(PAD_INPUT_1) == TRUE)
		{
			mpBox[i]->OpenBox();
			if (mpBox[i]->ChackKey() == true)
			{
				mpBox[i]->DeleteKey();
				mpPlayer->SetKey();
				mpUI[1]->KeyUIFlag();
			}
		}
	
		mpBox[i]->SetStage(mStage);

		mpBox[i]->Update();
	}
	//====================================-

	//UI==========================
	for (int i = 0; i < UI_NUM; i++)
	{
		mpUI[i]->Update();
	}

	//霧の更新
	mpMist->Update();
}

//=============================================
//			描画
//=============================================
void Stage::Draw()
{
	//ステージの描画===============================================================================--
	mPos2.mX = -32;
	mPos2.mY = -32;

	for (int y = 0; y < STAGE_SIZEY; y++)
	{
		mPos2.mX = -32;
		mPos2.mY += 32;
		for (int x = 0; x < STAGE_SIZEX; x++)
		{
			mPos2.mX += 32;
			if (mStage[y][x] == 0)
				continue;

			mSprite[y][x].Draw();
		}
	}

	mPos2.mX = -32;
	mPos2.mY = -32;
	//=================================================================================================

	//ドアの描画=================================================
	for (int i = 0; i < static_cast<int> (mpDoor.size()); i++)
	{
		if (mpDoor[i] == nullptr)
			continue;

		mpDoor[i]->Draw();
	}
	//=========================================================-

	//箱の描画
	for (int i = 0; i < mBoxCounter; i++)
		mpBox[i]->Draw();
	
	//人形の描画
	for (int i = 0; i < static_cast<int> (mpDoll.size()); i++)
		mpDoll[i]->Draw();

	//プレイヤーの描画
	mpPlayer->Draw();

	//敵の描画
	for (int i = 0; i < mEnemyCounter; i++)
	{
		if (mpEnemy[i] == nullptr)
			continue;
		mpEnemy[i]->Draw();
	}

	//UI==========================
	if (IsButtonUp(PAD_INPUT_3))
	{
		if (mpPlayer->GetTimerLimit() > 0)
		{
			//チュートリアルではマスクは描画しない
			if (mMode != MODE::THUTRIAL && mMode != MODE::THUTRIAL2)
				mpMask->Draw();

			//心音
			mpUI[0]->Draw();
		}
		
		mpMist->Draw();//霧
		mpUI[1]->Draw();//鍵の数
		mpUI[2]->Draw();//時間
		mpUI[4]->Draw();//人形の数
	}
	//=============================
}

//=============================================
//			ステージの移動
//=============================================
void Stage::MoveStage()
{
	//プレイヤーが特定の位置に来たらステージを動かす============================================================

	//同時にプレイヤー、敵、箱、扉、人形も動かす
	if (mStage[mPlayerPos.mY][mPlayerPos.mX] == -2 && mpPlayer->CheckButton() == true && mMoveFlag == false)
	{
		switch (mpPlayer->GetDirection())
		{
			case Player::MOVE::UP:
			{
				mMovePos.mY = mPos2.mY;

				mPos2.mX = mMovePos.mX;
				mPos2.mY = mMovePos.mY;

				//ステージの構築
				for (int y = 0; y < STAGE_SIZEY; y++)
				{
					mPos2.mX = mMovePos.mX;
					mPos2.mY += 32;

					for (int x = 0; x < STAGE_SIZEX; x++)
					{
						mPos2.mX += 32;
						mSprite[y][x].pos.x = static_cast<float>(mPos2.mX);
						mSprite[y][x].pos.y = static_cast<float>(mPos2.mY);
					}
				}
				mpPlayer->StageMove(Player::MOVE::UP);

				for (int i = 0; i < mEnemyCounter; i++)
				{
					if (mpEnemy[i] == nullptr)
						continue;
					mpEnemy[i]->StageMove(Enemy::MOVE::UP);
				}

				for (int i = 0; i < static_cast<int> (mpDoor.size()); i++)
				{
					if (mpDoor[i] == nullptr)
						continue;

					mpDoor[i]->StageMove(Door::MOVE::UP);
				}

				for (int i = 0; i < mBoxCounter; i++)
					mpBox[i]->StageMove(Box::MOVE::UP);


				for (int i = 0; i < static_cast<int> (mpDoll.size()); i++)
					mpDoll[i]->StageMove(Doll::MOVE::UP);

				mMoveFlag = true;
				break;
			}
			case Player::MOVE::DOWN:
			{
				mMovePos.mY = mPos2.mY - 256;

				mPos2.mX = mMovePos.mX;
				mPos2.mY =mMovePos.mY;

				//ステージの構築
				for (int y = 0; y < STAGE_SIZEY; y++)
				{
					mPos2.mX = mMovePos.mX;
					mPos2.mY += 32;

					for (int x = 0; x < STAGE_SIZEX; x++)
					{
						mPos2.mX += 32;
						mSprite[y][x].pos.x = static_cast<float>(mPos2.mX);
						mSprite[y][x].pos.y = static_cast<float>(mPos2.mY);
					}
				}
				mpPlayer->StageMove(Player::MOVE::DOWN);

				for (int i = 0; i < mEnemyCounter; i++)
				{
					if (mpEnemy[i] == nullptr)
						continue;
					mpEnemy[i]->StageMove(Enemy::MOVE::DOWN);
				}

				for (int i = 0; i < static_cast<int> (mpDoor.size()); i++)
				{
					if (mpDoor[i] == nullptr)
						continue;

					mpDoor[i]->StageMove(Door::MOVE::DOWN);
				}

				for (int i = 0; i < mBoxCounter; i++)
					mpBox[i]->StageMove(Box::MOVE::DOWN);


				for (int i = 0; i < static_cast<int> (mpDoll.size()); i++)
					mpDoll[i]->StageMove(Doll::MOVE::DOWN);

				mMoveFlag = true;
				break;
			}
			case Player::MOVE::LEFT:
			{
				mMovePos.mX = mPos2.mX;
				mPos2.mY = mMovePos.mY;

				//ステージの構築
				for (int y = 0; y < STAGE_SIZEY; y++)
				{
					mPos2.mX = mMovePos.mX;
					mPos2.mY += 32;

					for (int x = 0; x < STAGE_SIZEX; x++)
					{
						mPos2.mX += 32;
						mSprite[y][x].pos.x = static_cast<float>(mPos2.mX);
						mSprite[y][x].pos.y = static_cast<float>(mPos2.mY);
					}
				}
				mpPlayer->StageMove(Player::MOVE::LEFT);

				for (int i = 0; i < mEnemyCounter; i++)
				{
					if (mpEnemy[i] == nullptr)
						continue;
					mpEnemy[i]->StageMove(Enemy::MOVE::LEFT);
				}

				for (int i = 0; i < static_cast<int> (mpDoor.size()); i++)
				{
					if (mpDoor[i] == nullptr)
						continue;

					mpDoor[i]->StageMove(Door::MOVE::LEFT);
				}

				for (int i = 0; i < mBoxCounter; i++)
					mpBox[i]->StageMove(Box::MOVE::LEFT);


				for (int i = 0; i < static_cast<int> (mpDoll.size()); i++)
					mpDoll[i]->StageMove(Doll::MOVE::LEFT);

				mMoveFlag = true;
				break;
			}
			case Player::MOVE::RIGHT:
			{
				mMovePos.mX = mPos2.mX - 864;
				mPos2.mY = mMovePos.mY;
				//ステージの構築
				for (int y = 0; y < STAGE_SIZEY; y++)
				{
					mPos2.mX = mMovePos.mX;
					mPos2.mY += 32;

					for (int x = 0; x < STAGE_SIZEX; x++)
					{
						mPos2.mX += 32;
						mSprite[y][x].pos.x = static_cast<float>(mPos2.mX);
						mSprite[y][x].pos.y = static_cast<float>(mPos2.mY);
					}
				}
				mpPlayer->StageMove(Player::MOVE::RIGHT);

				for (int i = 0; i < mEnemyCounter; i++)
				{
					if (mpEnemy[i] == nullptr)
						continue;
					mpEnemy[i]->StageMove(Enemy::MOVE::RIGHT);
				}

				for (int i = 0; i < static_cast<int> (mpDoor.size()); i++)
				{
					if (mpDoor[i] == nullptr)
						continue;

					mpDoor[i]->StageMove(Door::MOVE::RIGHT);
				}

				for (int i = 0; i < mBoxCounter; i++)
					mpBox[i]->StageMove(Box::MOVE::RIGHT);


				for (int i = 0; i < static_cast<int> (mpDoll.size()); i++)
					mpDoll[i]->StageMove(Doll::MOVE::RIGHT);

				mMoveFlag = true;
				break;
			}
			default:
				break;
		}
	}
	//==============================================================================-

	if (mStage[mPlayerPos.mY][mPlayerPos.mX] != -2)
		mMoveFlag = false;
}

//=============================================
//			ゲームの終了処理
//=============================================
Stage::RESULTSCENE Stage::GameEnd()
{
	for (int i = 0; i < mEnemyCounter; i++)
	{
		if (mpEnemy[i] == nullptr)
			continue;
		//プレイヤーが敵につかまったら死亡シーンへ
		if (mpEnemy[i]->CheckHitPlayer() == false)
		{
			mpPlayer->Finalize();
			return RESULTSCENE::DIE;
		}
	}

	//チュートリアルでゴールしたら次のチュートリアルへ=========
	if (mpPlayer->CheckGoal() == true  &&
		mMode == MODE::THUTRIAL)
		return RESULTSCENE::THUTRIAL;

	if (mpPlayer->CheckGoal() == true  &&
		mMode == MODE::THUTRIAL2)
		return RESULTSCENE::THUTRIAL2;

	if (mpPlayer->CheckGoal() == true  &&
		mMode == MODE::THUTRIAL3)
		return RESULTSCENE::THUTRIAL3;
	//===========================================================


	//プレイヤーがゴールしたらリザルトへ
	if (mpPlayer->CheckGoal() == true )
		return RESULTSCENE::GOAL;

	return RESULTSCENE::NONE;
}

//=============================================
//			チュートリアル用
//=============================================
bool Stage::KeyCheckFlag()
{
	return mpPlayer->CheckKey() == mBoxCounter;
}

//=============================================
//			制限時間の取得
//=============================================
void Stage::SetTimerLimit(int num)
{
	mpPlayer->SetTimerLimit(num);
}

//=============================================
//			ステージの終了処理
//=============================================
void Stage::Finalize()
{
	delete mpMask;
	mpMask = nullptr;
	delete mpMist;
	mpMist = nullptr;
	delete mpPlayer;
	mpPlayer = nullptr;

	for (int i = 0; i < mEnemyCounter; i++)
	{
		if (mpEnemy[i] == nullptr)
			continue;

		delete mpEnemy[i];
		mpEnemy[i] = nullptr;
	}
	for (int i = 0; i < UI_NUM; i++)
	{
		mpUI[i]->Finalize();

		delete mpUI[i];
		mpUI[i] = nullptr;
	}
	for (int i = 0; i < mBoxCounter; i++)
	{
		delete mpBox[i];
		mpBox[i] = nullptr;
	}
	for (int i = 0; i < static_cast<int> (mpDoor.size()); i++)
	{
		if (mpDoor[i] == nullptr)
			continue;

		delete mpDoor[i];
		mpDoor[i] = nullptr;
	}
	for (int i = 0; i < static_cast<int>(mpDoll.size()); i++)
	{
		if (mpDoll[i] == nullptr)
			continue;

		delete mpDoll[i];
		mpDoll[i] = nullptr;
	}
}